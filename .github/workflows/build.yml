name: Build and Test

on:
  push:
    branches: [main, staging, production]
  pull_request:
    branches: [main, staging, production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-nextjs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type check
        run: npm run type-check || npx tsc --noEmit
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test -- --passWithNoTests
      
      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next/
            public/
          retention-days: 7

  build-docker:
    needs: build-nextjs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          docker run --rm -d --name test-container -p 3000:3000 $IMAGE_TAG
          sleep 10
          
          # Health check
          curl -f http://localhost:3000 || exit 1
          
          docker stop test-container
          echo "✓ Docker image working correctly"
      
      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  comment-pr:
    needs: [build-nextjs, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Build Status')
            );
            
            const output = `## ✅ Build Status
            
            **Branch:** \`${context.payload.pull_request.head.ref}\`
            **Commit:** \`${context.sha.substring(0, 7)}\`
            **Triggered by:** @${context.actor}
            
            ### Build Results
            - ✅ TypeScript type check passed
            - ✅ Linting passed
            - ✅ Next.js build successful
            - ✅ Docker image built and tested
            
            ### Next Steps
            Ready to merge! The build artifacts are available for deployment.
            
            <sub>Updated at ${new Date().toUTCString()}</sub>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

  report-failure:
    needs: [build-nextjs, build-docker]
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment failure on PR
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## ❌ Build Failed
            
            **Branch:** \`${context.payload.pull_request.head.ref}\`
            **Commit:** \`${context.sha.substring(0, 7)}\`
            
            The build has failed. Please check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
            
            ### Common Issues
            - TypeScript errors
            - Linting violations
            - Test failures
            - Build configuration issues
            - Docker build errors