name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'staging'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: eu-north-1
  ENVIRONMENT: staging
  EC2_HOST: ${{ secrets.STAGING_EC2_HOST }}
  EC2_USER: ${{ secrets.STAGING_EC2_USER }}
  CONTAINER_NAME: nextjs-staging
  APP_PORT: 3000

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify AWS Connection
        run: |
          echo "‚úì Connected as:"
          aws sts get-caller-identity
      
      - name: Determine Docker Tag
        id: docker-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.docker_tag }}" ]; then
            TAG="${{ inputs.docker_tag }}"
          else
            TAG="staging-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "full_image=$FULL_IMAGE" >> $GITHUB_OUTPUT
          echo "Using Docker image: $FULL_IMAGE"
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          
          # Add EC2 host to known_hosts
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Check EC2 Connectivity
        run: |
          echo "Testing SSH connection to ${{ env.EC2_USER }}@${{ env.EC2_HOST }}"
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
              "echo '‚úì SSH connection successful' && uname -a"
      
      - name: Deploy to EC2
        run: |
          echo "üöÄ Deploying to EC2 staging server..."
          
          ssh -i ~/.ssh/staging_key \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'ENDSSH'
          
          set -e
          
          echo "‚Üí Logging in to GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "‚Üí Pulling latest image: ${{ steps.docker-tag.outputs.full_image }}"
          docker pull ${{ steps.docker-tag.outputs.full_image }}
          
          echo "‚Üí Stopping old container..."
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          
          echo "‚Üí Starting new container..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.APP_PORT }}:3000 \
            -e NEXT_PUBLIC_BACKEND_API_URL="${{ secrets.STAGING_BACKEND_API_URL }}" \
            -e NODE_ENV=production \
            -e NEXT_PUBLIC_APP_VERSION="${{ github.sha }}" \
            -e NEXT_PUBLIC_BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -e NEXT_PUBLIC_ENV=staging \
            --restart unless-stopped \
            --log-driver json-file \
            --log-opt max-size=10m \
            --log-opt max-file=3 \
            ${{ steps.docker-tag.outputs.full_image }}
          
          echo "‚Üí Waiting for container to start..."
          sleep 5
          
          echo "‚Üí Checking container status..."
          docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "‚Üí Container logs (last 20 lines):"
          docker logs --tail 20 ${{ env.CONTAINER_NAME }}
          
          echo "‚úì Deployment complete"
          
          ENDSSH
      
      - name: Cleanup Old Docker Images on EC2
        run: |
          echo "Cleaning up old Docker images..."
          
          ssh -i ~/.ssh/staging_key \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'ENDSSH'
          
          # Keep only last 3 images
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --format "{{.ID}} {{.CreatedAt}}" | \
            sort -rk 2 | \
            awk 'NR>3 {print $1}' | \
            xargs -r docker rmi -f || true
          
          # Prune dangling images
          docker image prune -f
          
          echo "‚úì Cleanup complete"
          
          ENDSSH
      
      - name: Health Check
        run: |
          echo "Waiting for application to start..."
          sleep 15
          
          STAGING_URL="${{ secrets.STAGING_URL }}"
          MAX_RETRIES=15
          RETRY_COUNT=0
          
          echo "Running health checks against: $STAGING_URL"
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL" || echo "000")
            
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "‚úì Application is healthy (HTTP $HTTP_CODE)"
              exit 0
            fi
            
            echo "Got HTTP $HTTP_CODE, retrying..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 10
          done
          
          echo "‚ùå Health check failed after $MAX_RETRIES attempts"
          
          # Show container logs for debugging
          ssh -i ~/.ssh/staging_key \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
              "docker logs --tail 50 ${{ env.CONTAINER_NAME }}"
          
          exit 1
      
      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests against staging..."
          
          STAGING_URL="${{ secrets.STAGING_URL }}"
          
          # Test homepage
          echo "‚Üí Testing homepage..."
          curl -f -s "$STAGING_URL" > /dev/null && echo "‚úì Homepage accessible"
          
          # Test that env vars are present in the client bundle
          echo "‚Üí Checking environment variables..."
          RESPONSE=$(curl -s "$STAGING_URL")
          
          if echo "$RESPONSE" | grep -q "membership-portal-master-s83ce2.laravel.cloud"; then
            echo "‚úì Backend API URL configured correctly"
          else
            echo "‚ö†Ô∏è  Backend API URL not found in bundle"
          fi
          
          # Test backend API connectivity (optional)
          echo "‚Üí Testing backend API..."
          curl -f -s "${{ secrets.STAGING_BACKEND_API_URL }}/health" > /dev/null \
            && echo "‚úì Backend API reachable" \
            || echo "‚ö†Ô∏è  Backend API unreachable (may be expected)"
          
          echo "‚úì All smoke tests passed"
      
      - name: Get Deployment Info
        if: success()
        run: |
          ssh -i ~/.ssh/staging_key \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'ENDSSH'
          
          echo "=== Deployment Information ==="
          echo "Container: ${{ env.CONTAINER_NAME }}"
          docker inspect ${{ env.CONTAINER_NAME }} \
            --format 'Image: {{.Config.Image}}
          Created: {{.Created}}
          Status: {{.State.Status}}
          Memory: {{.HostConfig.Memory}}
          RestartPolicy: {{.HostConfig.RestartPolicy.Name}}'
          
          echo ""
          echo "=== Resource Usage ==="
          docker stats --no-stream ${{ env.CONTAINER_NAME }}
          
          echo ""
          echo "=== Environment Variables ==="
          docker exec ${{ env.CONTAINER_NAME }} env | grep NEXT_PUBLIC || true
          
          ENDSSH
      
      - name: Notify Deployment Success
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo ""
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Image: ${{ steps.docker-tag.outputs.full_image }}"
          echo "URL: ${{ secrets.STAGING_URL }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo ""
          echo "Environment Variables:"
          echo "  NEXT_PUBLIC_BACKEND_API_URL: ${{ secrets.STAGING_BACKEND_API_URL }}"
          echo "  NEXT_PUBLIC_APP_VERSION: ${{ github.sha }}"
          echo "  NEXT_PUBLIC_ENV: staging"
      
      - name: Rollback on Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Attempting rollback..."
          
          # Get previous running image
          PREVIOUS_IMAGE=$(ssh -i ~/.ssh/staging_key \
            ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
            "docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format '{{.Repository}}:{{.Tag}}' | head -n 2 | tail -n 1" || echo "")
          
          if [ -n "$PREVIOUS_IMAGE" ]; then
            echo "Rolling back to: $PREVIOUS_IMAGE"
            
            ssh -i ~/.ssh/staging_key \
                ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << ENDSSH
            
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.APP_PORT }}:3000 \
              -e NEXT_PUBLIC_BACKEND_API_URL="${{ secrets.STAGING_BACKEND_API_URL }}" \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_APP_VERSION="rollback" \
              -e NEXT_PUBLIC_BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -e NEXT_PUBLIC_ENV=staging \
              --restart unless-stopped \
              $PREVIOUS_IMAGE
            
            ENDSSH
            
            echo "‚úì Rolled back to previous version"
          else
            echo "‚ö†Ô∏è  No previous image found for rollback"
          fi
          
          echo ""
          echo "Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      
      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/staging_key