name: 🚀 Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: mugemanebertin
  DOCKERHUB_IMAGE_NAME: komuu_frontend
  AWS_REGION: eu-north-1
  ENVIRONMENT: staging
  EC2_HOST: ${{ secrets.STAGING_EC2_HOST }}
  EC2_USER: ${{ secrets.STAGING_EC2_USER }}
  CONTAINER_NAME: nextjs-staging
  APP_PORT: 3000

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🏷️ Determine Docker Tag
        id: docker-tag
        run: |
          TAG="staging-$(echo ${{ github.sha }} | cut -c1-7)"
          DOCKERHUB_IMAGE="${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}:$TAG"
          DOCKERHUB_IMAGE_LATEST="${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}:staging-latest"
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "dockerhub_image=$DOCKERHUB_IMAGE" >> $GITHUB_OUTPUT
          echo "dockerhub_image_latest=$DOCKERHUB_IMAGE_LATEST" >> $GITHUB_OUTPUT
          echo "Using Docker Hub image: $DOCKERHUB_IMAGE"
      
      - name: 🔨 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.docker-tag.outputs.dockerhub_image }}
            ${{ steps.docker-tag.outputs.dockerhub_image_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_BACKEND_API_URL=${{ secrets.STAGING_BACKEND_API_URL }}
            NEXT_PUBLIC_ENV=staging
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      
      - name: ✅ Verify Pushed Images
        run: |
          echo "✅ Images pushed successfully:"
          echo "Docker Hub: ${{ steps.docker-tag.outputs.dockerhub_image }}"
          echo "Docker Hub Latest: ${{ steps.docker-tag.outputs.dockerhub_image_latest }}"
          
          docker pull ${{ steps.docker-tag.outputs.dockerhub_image }}
          echo "✓ Docker Hub image verified"
      
      - name: 🔐 Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: 🔌 Check EC2 Connectivity
        run: |
          echo "Testing SSH connection to ${{ env.EC2_USER }}@${{ env.EC2_HOST }}"
          ssh -i ~/.ssh/staging_key \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=10 \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
              "echo '✓ SSH connection successful' && uname -a"
      
      - name: 📸 Create Backup
        run: |
          echo "📦 Creating backup of current staging..."
          ssh -i ~/.ssh/staging_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            set -e
            if docker ps -a --format '{{.Names}}' | grep -q '^${{ env.CONTAINER_NAME }}$'; then
              CURRENT_IMAGE=\$(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.Config.Image}}' 2>/dev/null || echo '')
              if [ -n \"\$CURRENT_IMAGE\" ]; then
                BACKUP_TAG=\"staging-backup-\$(date +%Y%m%d-%H%M%S)\"
                echo \"Current image: \$CURRENT_IMAGE\"
                echo \"Backup tag: \$BACKUP_TAG\"
                docker tag \"\$CURRENT_IMAGE\" \"${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}:\$BACKUP_TAG\"
                echo '✓ Backup created: '\$BACKUP_TAG
              else
                echo '⚠️ Could not get current image info'
              fi
            else
              echo 'ℹ No existing container to backup'
            fi
          "
      
      - name: 🚀 Deploy to EC2
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKERHUB_IMAGE: ${{ steps.docker-tag.outputs.dockerhub_image }}
          BACKEND_URL: ${{ secrets.STAGING_BACKEND_API_URL }}
          COMMIT_SHA: ${{ github.sha }}
          BUILD_TIME: ${{ github.event.head_commit.timestamp }}
        run: |
          echo "🚀 Deploying to EC2 staging server..."
          ssh -i ~/.ssh/staging_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            set -e
            
            echo '→ Logging in to Docker Hub...'
            echo '$DOCKERHUB_TOKEN' | docker login -u '${{ env.DOCKERHUB_USERNAME }}' --password-stdin
            
            echo '→ Pulling latest image: $DOCKERHUB_IMAGE'
            docker pull '$DOCKERHUB_IMAGE'
            
            echo '→ Stopping old container...'
            docker stop '$CONTAINER_NAME' 2>/dev/null || true
            docker rm '$CONTAINER_NAME' 2>/dev/null || true
            
            echo '→ Starting new container...'
            docker run -d \
              --name '$CONTAINER_NAME' \
              -p '${APP_PORT}:3000' \
              -e NEXT_PUBLIC_BACKEND_API_URL='$BACKEND_URL' \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_APP_VERSION='$COMMIT_SHA' \
              -e NEXT_PUBLIC_BUILD_TIME='$BUILD_TIME' \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              '$DOCKERHUB_IMAGE'
            
            echo '→ Waiting for container to start...'
            sleep 10
            
            echo '→ Checking container status...'
            docker ps --filter 'name=$CONTAINER_NAME'
            
            echo '→ Verifying environment variables...'
            docker exec '$CONTAINER_NAME' printenv | grep -E '(NEXT_PUBLIC|NODE_ENV)' || true
            
            echo '→ Container logs (last 20 lines):'
            docker logs --tail 20 '$CONTAINER_NAME'
            
            echo '✓ Deployment complete'
          "
      
      - name: 🧹 Cleanup Old Docker Images
        run: |
          ssh -i ~/.ssh/staging_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            echo '→ Cleaning up old images...'
            
            # Keep only last 3 staging images
            docker images '${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}' \
              --format '{{.ID}} {{.Tag}} {{.CreatedAt}}' | \
              grep 'staging-' | \
              grep -v 'staging-latest' | \
              grep -v 'staging-backup' | \
              sort -k3 -r | \
              awk 'NR>3 {print \$1}' | \
              xargs -r docker rmi -f 2>/dev/null || true
            
            # Keep last 2 backup images
            docker images '${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}' \
              --format '{{.ID}} {{.Tag}} {{.CreatedAt}}' | \
              grep 'staging-backup' | \
              sort -k3 -r | \
              awk 'NR>2 {print \$1}' | \
              xargs -r docker rmi -f 2>/dev/null || true
            
            docker image prune -f
            
            echo '✓ Cleanup complete'
          "
      
      - name: 🏥 Health Check
        run: |
          echo "Waiting for application to start..."
          sleep 15
          
          STAGING_URL="${{ secrets.STAGING_URL }}"
          MAX_RETRIES=15
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i/$MAX_RETRIES"
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$STAGING_URL" || echo "000")
            
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "✓ Application is healthy (HTTP $HTTP_CODE)"
              exit 0
            fi
            
            echo "Got HTTP $HTTP_CODE, retrying in 10s..."
            sleep 10
          done
          
          echo "❌ Health check failed after $MAX_RETRIES attempts"
          ssh -i ~/.ssh/staging_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "docker logs --tail 50 ${{ env.CONTAINER_NAME }}"
          exit 1
      
      - name: 🎉 Notify Success
        if: success()
        run: |
          echo "## ✅ Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ secrets.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend API:** ${{ secrets.STAGING_BACKEND_API_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.docker-tag.outputs.dockerhub_image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
      
      - name: 🔄 Rollback on Failure
        if: failure()
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          BACKEND_URL: ${{ secrets.STAGING_BACKEND_API_URL }}
          STAGING_URL: ${{ secrets.STAGING_URL }}
          COMMIT_SHA: rollback
        run: |
          echo "❌ Deployment failed! Attempting rollback..."
          
          BACKUP_IMAGE=$(ssh -i ~/.ssh/staging_key \
            ${{ env.EC2_USER }}@${{ env.EC2_HOST }} \
            "docker images ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }} --format '{{.Repository}}:{{.Tag}}' | grep staging-backup | head -n 1" || echo "")
          
          if [ -n "$BACKUP_IMAGE" ]; then
            echo "Rolling back to: $BACKUP_IMAGE"
            
            ssh -i ~/.ssh/staging_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
              set -e
              
              echo 'Logging in to Docker Hub...'
              echo '$DOCKERHUB_TOKEN' | docker login -u '${{ env.DOCKERHUB_USERNAME }}' --password-stdin
              
              echo 'Stopping current container...'
              docker stop '$CONTAINER_NAME' 2>/dev/null || true
              docker rm '$CONTAINER_NAME' 2>/dev/null || true
              
              echo 'Starting backup container...'
              docker run -d \
                --name '$CONTAINER_NAME' \
                -p '${APP_PORT}:3000' \
                -e NEXT_PUBLIC_BACKEND_API_URL='$BACKEND_URL' \
                -e NODE_ENV=production \
                -e NEXT_PUBLIC_APP_VERSION='$COMMIT_SHA' \
                -e NEXT_PUBLIC_BUILD_TIME=\"\$(date -u +%Y-%m-%dT%H:%M:%SZ)\" \
                --restart unless-stopped \
                '$BACKUP_IMAGE'
              
              echo 'Waiting for rollback container to start...'
              sleep 15
              
              HTTP_CODE=\$(curl -s -o /dev/null -w '%{http_code}' --max-time 10 '$STAGING_URL' || echo '000')
              if [ \"\$HTTP_CODE\" = '200' ] || [ \"\$HTTP_CODE\" = '301' ] || [ \"\$HTTP_CODE\" = '302' ]; then
                echo '✓ Rollback successful (HTTP '\$HTTP_CODE')'
              else
                echo '❌ Rollback failed - manual intervention required (HTTP '\$HTTP_CODE')'
                docker logs --tail 50 '$CONTAINER_NAME'
                exit 1
              fi
              
              echo '✓ Rollback complete'
            "
          else
            echo "❌ No backup image found for rollback"
            
            ssh -i ~/.ssh/staging_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
              echo '=== Current Docker Containers ==='
              docker ps -a
              echo '=== Current Docker Images ==='
              docker images
              echo '=== Failed Container Logs ==='
              docker logs --tail 100 '$CONTAINER_NAME' 2>/dev/null || echo 'No container logs available'
            " || true
            exit 1
          fi
      
      - name: 🧹 Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/staging_key